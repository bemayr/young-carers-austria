# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  posts: PostManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForUpdateInput
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForCreateInput
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

type Post {
  id: ID!
  title: String
  status: String
  content: Post_content_Document
  publishDate: DateTime
  author: User
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  status: StringNullableFilter
  publishDate: DateTimeNullableFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
}

input PostUpdateInput {
  title: String
  status: String
  content: JSON
  publishDate: DateTime
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  status: String
  content: JSON
  publishDate: DateTime
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

type Category {
  id: ID!
  name: String
  title: String
  information: Category_information_Document
  renderedInformation: String
  lastUpdated: DateTime
  references(
    where: ReferenceWhereInput! = {}
    orderBy: [ReferenceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Reference!]
  referencesCount(where: ReferenceWhereInput! = {}): Int
  keywords(
    where: KeywordWhereInput! = {}
    orderBy: [KeywordOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Keyword!]
  keywordsCount(where: KeywordWhereInput! = {}): Int
}

type Category_information_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input CategoryWhereUniqueInput {
  id: ID
  name: String
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  title: StringFilter
  renderedInformation: StringFilter
  lastUpdated: DateTimeNullableFilter
  references: ReferenceManyRelationFilter
  keywords: KeywordManyRelationFilter
}

input ReferenceManyRelationFilter {
  every: ReferenceWhereInput
  some: ReferenceWhereInput
  none: ReferenceWhereInput
}

input KeywordManyRelationFilter {
  every: KeywordWhereInput
  some: KeywordWhereInput
  none: KeywordWhereInput
}

input CategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  title: OrderDirection
  renderedInformation: OrderDirection
  lastUpdated: OrderDirection
}

input CategoryUpdateInput {
  name: String
  title: String
  information: JSON
  renderedInformation: String
  lastUpdated: DateTime
  references: ReferenceRelateToManyForUpdateInput
  keywords: KeywordRelateToManyForUpdateInput
}

input ReferenceRelateToManyForUpdateInput {
  disconnect: [ReferenceWhereUniqueInput!]
  set: [ReferenceWhereUniqueInput!]
  create: [ReferenceCreateInput!]
  connect: [ReferenceWhereUniqueInput!]
}

input KeywordRelateToManyForUpdateInput {
  disconnect: [KeywordWhereUniqueInput!]
  set: [KeywordWhereUniqueInput!]
  create: [KeywordCreateInput!]
  connect: [KeywordWhereUniqueInput!]
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  name: String
  title: String
  information: JSON
  renderedInformation: String
  lastUpdated: DateTime
  references: ReferenceRelateToManyForCreateInput
  keywords: KeywordRelateToManyForCreateInput
}

input ReferenceRelateToManyForCreateInput {
  create: [ReferenceCreateInput!]
  connect: [ReferenceWhereUniqueInput!]
}

input KeywordRelateToManyForCreateInput {
  create: [KeywordCreateInput!]
  connect: [KeywordWhereUniqueInput!]
}

type Reference {
  id: ID!
  url: String
  type: ReferenceTypeType
  owner: String
  target: ReferenceTargetType
  title: String
  description: String
  ogPreview: String
  lastUpdated: DateTime
  categories(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  keywords(
    where: KeywordWhereInput! = {}
    orderBy: [KeywordOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Keyword!]
  keywordsCount(where: KeywordWhereInput! = {}): Int
}

enum ReferenceTypeType {
  booklet
  podcast
  song
  video
  website
}

enum ReferenceTargetType {
  all
  youngcarers
  parents
}

input ReferenceWhereUniqueInput {
  id: ID
  url: String
}

input ReferenceWhereInput {
  AND: [ReferenceWhereInput!]
  OR: [ReferenceWhereInput!]
  NOT: [ReferenceWhereInput!]
  id: IDFilter
  url: StringFilter
  type: ReferenceTypeTypeNullableFilter
  owner: StringFilter
  target: ReferenceTargetTypeNullableFilter
  title: StringFilter
  description: StringFilter
  ogPreview: StringFilter
  lastUpdated: DateTimeNullableFilter
  categories: CategoryManyRelationFilter
  keywords: KeywordManyRelationFilter
}

input ReferenceTypeTypeNullableFilter {
  equals: ReferenceTypeType
  in: [ReferenceTypeType!]
  notIn: [ReferenceTypeType!]
  not: ReferenceTypeTypeNullableFilter
}

input ReferenceTargetTypeNullableFilter {
  equals: ReferenceTargetType
  in: [ReferenceTargetType!]
  notIn: [ReferenceTargetType!]
  not: ReferenceTargetTypeNullableFilter
}

input CategoryManyRelationFilter {
  every: CategoryWhereInput
  some: CategoryWhereInput
  none: CategoryWhereInput
}

input ReferenceOrderByInput {
  id: OrderDirection
  url: OrderDirection
  type: OrderDirection
  owner: OrderDirection
  target: OrderDirection
  title: OrderDirection
  description: OrderDirection
  ogPreview: OrderDirection
  lastUpdated: OrderDirection
}

input ReferenceUpdateInput {
  url: String
  type: ReferenceTypeType
  owner: String
  target: ReferenceTargetType
  title: String
  description: String
  ogPreview: String
  lastUpdated: DateTime
  categories: CategoryRelateToManyForUpdateInput
  keywords: KeywordRelateToManyForUpdateInput
}

input CategoryRelateToManyForUpdateInput {
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input ReferenceUpdateArgs {
  where: ReferenceWhereUniqueInput!
  data: ReferenceUpdateInput!
}

input ReferenceCreateInput {
  url: String
  type: ReferenceTypeType
  owner: String
  target: ReferenceTargetType
  title: String
  description: String
  ogPreview: String
  lastUpdated: DateTime
  categories: CategoryRelateToManyForCreateInput
  keywords: KeywordRelateToManyForCreateInput
}

input CategoryRelateToManyForCreateInput {
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

type Keyword {
  id: ID!
  name: String
}

input KeywordWhereUniqueInput {
  id: ID
  name: String
}

input KeywordWhereInput {
  AND: [KeywordWhereInput!]
  OR: [KeywordWhereInput!]
  NOT: [KeywordWhereInput!]
  id: IDFilter
  name: StringFilter
}

input KeywordOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input KeywordUpdateInput {
  name: String
}

input KeywordUpdateArgs {
  where: KeywordWhereUniqueInput!
  data: KeywordUpdateInput!
}

input KeywordCreateInput {
  name: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(
    where: CategoryWhereUniqueInput!
    data: CategoryUpdateInput!
  ): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createReference(data: ReferenceCreateInput!): Reference
  createReferences(data: [ReferenceCreateInput!]!): [Reference]
  updateReference(
    where: ReferenceWhereUniqueInput!
    data: ReferenceUpdateInput!
  ): Reference
  updateReferences(data: [ReferenceUpdateArgs!]!): [Reference]
  deleteReference(where: ReferenceWhereUniqueInput!): Reference
  deleteReferences(where: [ReferenceWhereUniqueInput!]!): [Reference]
  createKeyword(data: KeywordCreateInput!): Keyword
  createKeywords(data: [KeywordCreateInput!]!): [Keyword]
  updateKeyword(
    where: KeywordWhereUniqueInput!
    data: KeywordUpdateInput!
  ): Keyword
  updateKeywords(data: [KeywordUpdateArgs!]!): [Keyword]
  deleteKeyword(where: KeywordWhereUniqueInput!): Keyword
  deleteKeywords(where: [KeywordWhereUniqueInput!]!): [Keyword]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  categories(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  references(
    where: ReferenceWhereInput! = {}
    orderBy: [ReferenceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Reference!]
  reference(where: ReferenceWhereUniqueInput!): Reference
  referencesCount(where: ReferenceWhereInput! = {}): Int
  keywords(
    where: KeywordWhereInput! = {}
    orderBy: [KeywordOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Keyword!]
  keyword(where: KeywordWhereUniqueInput!): Keyword
  keywordsCount(where: KeywordWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
