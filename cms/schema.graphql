# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Category {
  id: ID!
  name: String
  title: String
  information: Category_information_Document
  renderedInformation: String
  keywords: String
  lastUpdated: DateTime
  references(
    where: ReferenceWhereInput! = {}
    orderBy: [ReferenceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Reference!]
  referencesCount(where: ReferenceWhereInput! = {}): Int
}

type Category_information_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input CategoryWhereUniqueInput {
  id: ID
  name: String
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  title: StringFilter
  renderedInformation: StringFilter
  keywords: StringFilter
  references: ReferenceManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input ReferenceManyRelationFilter {
  every: ReferenceWhereInput
  some: ReferenceWhereInput
  none: ReferenceWhereInput
}

input CategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  renderedInformation: OrderDirection
  lastUpdated: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input CategoryUpdateInput {
  name: String
  title: String
  information: JSON
  renderedInformation: String
  keywords: String
  lastUpdated: DateTime
  references: ReferenceRelateToManyForUpdateInput
}

input ReferenceRelateToManyForUpdateInput {
  disconnect: [ReferenceWhereUniqueInput!]
  set: [ReferenceWhereUniqueInput!]
  create: [ReferenceCreateInput!]
  connect: [ReferenceWhereUniqueInput!]
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  name: String
  title: String
  information: JSON
  renderedInformation: String
  keywords: String
  lastUpdated: DateTime
  references: ReferenceRelateToManyForCreateInput
}

input ReferenceRelateToManyForCreateInput {
  create: [ReferenceCreateInput!]
  connect: [ReferenceWhereUniqueInput!]
}

type Reference {
  id: ID!
  url: String
  title: String
  description: String
  previewImageUrl: String
  address: UrlFieldOutput
  onlineStatus: ReferenceOnlineStatusType
  isPaidContent: Boolean
  keywords: String
  lastUpdated: DateTime
  owner: Owner
  categories(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
}

type UrlFieldOutput {
  url: String
  onlineStatus: UrlOnlineStatus
  openGraphData: String
  title: String
  description: String
  previewImageUrl: String
}

union UrlOnlineStatus =
    UrlOnline
  | UrlOffline
  | UrlMoved
  | UrlTimeout
  | UrlError

type UrlOnline {
  url: String!
  status: String!
}

type UrlOffline {
  url: String!
  status: String!
  statusCode: Int
}

type UrlMoved {
  url: String!
  status: String!
  statusCode: Int
  location: String
}

type UrlTimeout {
  url: String!
  status: String!
}

type UrlError {
  url: String!
  status: String!
  error: String!
}

enum ReferenceOnlineStatusType {
  online
  offline
  moved
  timeout
  error
}

input ReferenceWhereUniqueInput {
  id: ID
  url: String
}

input ReferenceWhereInput {
  AND: [ReferenceWhereInput!]
  OR: [ReferenceWhereInput!]
  NOT: [ReferenceWhereInput!]
  id: IDFilter
  url: StringFilter
  title: StringFilter
  description: StringFilter
  previewImageUrl: StringFilter
  onlineStatus: ReferenceOnlineStatusTypeNullableFilter
  isPaidContent: BooleanFilter
  keywords: StringFilter
  owner: OwnerWhereInput
  categories: CategoryManyRelationFilter
}

input ReferenceOnlineStatusTypeNullableFilter {
  equals: ReferenceOnlineStatusType
  in: [ReferenceOnlineStatusType!]
  notIn: [ReferenceOnlineStatusType!]
  not: ReferenceOnlineStatusTypeNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input CategoryManyRelationFilter {
  every: CategoryWhereInput
  some: CategoryWhereInput
  none: CategoryWhereInput
}

input ReferenceOrderByInput {
  id: OrderDirection
  url: OrderDirection
  title: OrderDirection
  description: OrderDirection
  previewImageUrl: OrderDirection
  onlineStatus: OrderDirection
  isPaidContent: OrderDirection
  lastUpdated: OrderDirection
}

input ReferenceUpdateInput {
  url: String
  title: String
  description: String
  previewImageUrl: String
  address: UrlFieldInput
  onlineStatus: ReferenceOnlineStatusType
  isPaidContent: Boolean
  keywords: String
  lastUpdated: DateTime
  owner: OwnerRelateToOneForUpdateInput
  categories: CategoryRelateToManyForUpdateInput
}

input UrlFieldInput {
  url: String
  onlineStatus: String
  openGraphData: String
  title: String
  description: String
  previewImageUrl: String
}

input OwnerRelateToOneForUpdateInput {
  create: OwnerCreateInput
  connect: OwnerWhereUniqueInput
  disconnect: Boolean
}

input CategoryRelateToManyForUpdateInput {
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input ReferenceUpdateArgs {
  where: ReferenceWhereUniqueInput!
  data: ReferenceUpdateInput!
}

input ReferenceCreateInput {
  url: String
  title: String
  description: String
  previewImageUrl: String
  address: UrlFieldInput
  onlineStatus: ReferenceOnlineStatusType
  isPaidContent: Boolean
  keywords: String
  lastUpdated: DateTime
  owner: OwnerRelateToOneForCreateInput
  categories: CategoryRelateToManyForCreateInput
}

input OwnerRelateToOneForCreateInput {
  create: OwnerCreateInput
  connect: OwnerWhereUniqueInput
}

input CategoryRelateToManyForCreateInput {
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

type Owner {
  id: ID!
  name: String
  url: String
  references(
    where: ReferenceWhereInput! = {}
    orderBy: [ReferenceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Reference!]
  referencesCount(where: ReferenceWhereInput! = {}): Int
}

input OwnerWhereUniqueInput {
  id: ID
  name: String
}

input OwnerWhereInput {
  AND: [OwnerWhereInput!]
  OR: [OwnerWhereInput!]
  NOT: [OwnerWhereInput!]
  id: IDFilter
  name: StringFilter
  url: StringFilter
  references: ReferenceManyRelationFilter
}

input OwnerOrderByInput {
  id: OrderDirection
  name: OrderDirection
  url: OrderDirection
}

input OwnerUpdateInput {
  name: String
  url: String
  references: ReferenceRelateToManyForUpdateInput
}

input OwnerUpdateArgs {
  where: OwnerWhereUniqueInput!
  data: OwnerUpdateInput!
}

input OwnerCreateInput {
  name: String
  url: String
  references: ReferenceRelateToManyForCreateInput
}

type Singleton {
  id: ID!
  name: String
  title: String
  content: Singleton_content_Document
  renderedContent: String
}

type Singleton_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input SingletonWhereUniqueInput {
  id: ID
  name: String
}

input SingletonWhereInput {
  AND: [SingletonWhereInput!]
  OR: [SingletonWhereInput!]
  NOT: [SingletonWhereInput!]
  id: IDFilter
  name: StringFilter
  title: StringFilter
  renderedContent: StringFilter
}

input SingletonOrderByInput {
  id: OrderDirection
  name: OrderDirection
  title: OrderDirection
  renderedContent: OrderDirection
}

input SingletonUpdateInput {
  name: String
  title: String
  content: JSON
  renderedContent: String
}

input SingletonUpdateArgs {
  where: SingletonWhereUniqueInput!
  data: SingletonUpdateInput!
}

input SingletonCreateInput {
  name: String
  title: String
  content: JSON
  renderedContent: String
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(
    where: CategoryWhereUniqueInput!
    data: CategoryUpdateInput!
  ): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createReference(data: ReferenceCreateInput!): Reference
  createReferences(data: [ReferenceCreateInput!]!): [Reference]
  updateReference(
    where: ReferenceWhereUniqueInput!
    data: ReferenceUpdateInput!
  ): Reference
  updateReferences(data: [ReferenceUpdateArgs!]!): [Reference]
  deleteReference(where: ReferenceWhereUniqueInput!): Reference
  deleteReferences(where: [ReferenceWhereUniqueInput!]!): [Reference]
  createOwner(data: OwnerCreateInput!): Owner
  createOwners(data: [OwnerCreateInput!]!): [Owner]
  updateOwner(where: OwnerWhereUniqueInput!, data: OwnerUpdateInput!): Owner
  updateOwners(data: [OwnerUpdateArgs!]!): [Owner]
  deleteOwner(where: OwnerWhereUniqueInput!): Owner
  deleteOwners(where: [OwnerWhereUniqueInput!]!): [Owner]
  createSingleton(data: SingletonCreateInput!): Singleton
  createSingletons(data: [SingletonCreateInput!]!): [Singleton]
  updateSingleton(
    where: SingletonWhereUniqueInput!
    data: SingletonUpdateInput!
  ): Singleton
  updateSingletons(data: [SingletonUpdateArgs!]!): [Singleton]
  deleteSingleton(where: SingletonWhereUniqueInput!): Singleton
  deleteSingletons(where: [SingletonWhereUniqueInput!]!): [Singleton]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  categories(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  references(
    where: ReferenceWhereInput! = {}
    orderBy: [ReferenceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Reference!]
  reference(where: ReferenceWhereUniqueInput!): Reference
  referencesCount(where: ReferenceWhereInput! = {}): Int
  owners(
    where: OwnerWhereInput! = {}
    orderBy: [OwnerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Owner!]
  owner(where: OwnerWhereUniqueInput!): Owner
  ownersCount(where: OwnerWhereInput! = {}): Int
  singletons(
    where: SingletonWhereInput! = {}
    orderBy: [SingletonOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Singleton!]
  singleton(where: SingletonWhereUniqueInput!): Singleton
  singletonsCount(where: SingletonWhereInput! = {}): Int
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
